import { defineStore } from 'pinia'
import axios from 'axios'
import { ref } from 'vue'
import * as XLSX from 'xlsx'

export interface Student {
  full_name: string
  id: number
  name: string
  iin: string
  email: string
  phone: string
  status: string
  top_student: boolean
  funding_source: string
  total_cost: number
  discount_percent: number
  paid_amount: number
  subject: string
  stream?: string
  stream_id?: number
}

export const useStudentStore = defineStore('student', {
  state: () => ({
    list: [] as Student[],
    streams: {} as Record<number, string>,
  }),
  actions: {
    async fetchStudents() {
      try {
        const res = await axios.get('/api/students')
        this.list = res.data.map((s: any): Student => ({
          id: s.id,
          name: s.full_name,
          full_name: s.full_name,
          iin: s.iin,
          email: s.email,
          phone: s.phone || '',
          status: s.status || '',
          top_student: s.top_student,
          funding_source: s.funding_source || '',
          subject: s.subject || '',
          stream: s.stream,
          stream_id: s.stream_id,
          total_cost: s.total_cost,
          paid_amount: s.paid_amount,
          discount_percent: s.discount_percent,
        }))
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error)
      }
    },

    async fetchStreams() {
      const streams = ref<Record<number, string>>({})
      const res = await fetch('/api/streams')
      const data = await res.json()
      this.streams = Object.fromEntries(data.map((s: any) => [s.id, s.name]))
      console.log('Streams map:', this.streams)
    },

    async updateStudent(id: number, updatedData: Partial<Student>) {
      try {
        const response = await fetch(`/api/students/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        })
        if (!response.ok) throw new Error('Failed to update student')
        const updatedStudent = await response.json()

        const index = this.list.findIndex((s) => s.id === id)
        if (index !== -1) {
          this.list[index] = updatedStudent
        }
      } catch (error) {
        console.error(error)
        throw error
      }
    },

    async createStudent(newStudent: Omit<Student, 'id'>) {
      try {
        const response = await fetch('/api/students', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newStudent),
        })
        if (!response.ok) throw new Error('Failed to create student')
        const createdStudent = await response.json()

        this.list.push(createdStudent)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error)
        throw error
      }
    },

    // üîΩ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
    exportToExcel() {
      const dataToExport = this.list.map((s) => ({
        ID: s.id,
        –§–ò–û: s.name,
        –ò–ò–ù: s.iin,
        Email: s.email,
        –¢–µ–ª–µ—Ñ–æ–Ω: s.phone,
        –°—Ç–∞—Ç—É—Å: s.status,
        –¢–æ–ø: s.top_student ? '–î–∞' : '–ù–µ—Ç',
        –ö—É—Ä—Å: s.subject,
        –ü–æ—Ç–æ–∫: s.stream || '',
        –ò—Å—Ç–æ—á–Ω–∏–∫–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: s.funding_source,
        –û–±—â–∞—è–°—Ç–æ–∏–º–æ—Å—Ç—å: s.total_cost,
        –°–∫–∏–¥–∫–∞: s.discount_percent,
        –û–ø–ª–∞—á–µ–Ω–æ: s.paid_amount,
        –û—Å—Ç–∞–ª–æ—Å—å: s.total_cost - s.paid_amount,
      }))

      const worksheet = XLSX.utils.json_to_sheet(dataToExport)
      const workbook = XLSX.utils.book_new()
      XLSX.utils.book_append_sheet(workbook, worksheet, '–°—Ç—É–¥–µ–Ω—Ç—ã')

      const now = new Date().toISOString().split('T')[0]
      XLSX.writeFile(workbook, `students_${now}.xlsx`)
    },
  },
})

import { defineStore } from 'pinia'
import axios from 'axios'
import * as XLSX from 'xlsx'

// üìå –¢–∏–ø —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ API
export interface Student {
  id: number
  full_name: string
  iin: string
  email: string
  phone: string
  status: string
  top_student: boolean
  funding_source: string
  subject: string
  total_cost: number
  discount_percent: number
  paid_amount: number
  amount_remaining: number
  payment_period: number
  stream_id?: number
  stream?: string

  // üëá –î–æ–±–∞–≤—å —ç—Ç–æ
  payment_schedule?: {
    date: string
    amount: number
    paid: boolean
    comment?: string
  }[]
}


// üìå –¢–∏–ø –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
export interface Stream {
  id: number
  name: string
}

// üìå –ï–¥–∏–Ω–∏—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂
export interface PaymentEntry {
  date: string
  amount: number
  paid: boolean
}

// üìå –ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
export interface StudentFull extends Omit<Student, 'payment_period'> {
  financing: string
  totalCoursePrice: number
  discountPercent: number
  discountedPrice: number
  paymentPeriod: number // ‚úÖ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
  paymentSchedule: PaymentEntry[]
}

export const useStudentStore = defineStore('student', {
  state: () => ({
    list: [] as Student[],
    streams: {} as Record<number, string>,
  }),

  actions: {
    // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    async fetchStudents() {
      try {
        const res = await axios.get('/api/students')
        this.list = res.data
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', err)
      }
    },

    // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    async fetchById(id: number | string): Promise<StudentFull> {
      try {
        const res = await axios.get(`/api/students/${id}`)
        const s = res.data

        return {
          id: s.id,
          full_name: s.full_name,
          iin: s.iin,
          email: s.email,
          phone: s.phone,
          status: s.status,
          top_student: s.top_student,
          funding_source: s.funding_source,
          subject: s.subject,
          total_cost: s.total_cost,
          discount_percent: s.discount_percent,
          paid_amount: s.paid_amount,
          amount_remaining: s.amount_remaining,
          stream_id: s.stream_id,
          stream: s.stream,

          // üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
          financing: s.funding_source || '',
          totalCoursePrice: s.total_cost,
          discountPercent: s.discount_percent,
          discountedPrice: Math.round(s.total_cost * (1 - s.discount_percent / 100)),
          paymentPeriod: s.payment_period,
          paymentSchedule: s.paymentSchedule ?? [],
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID:', err)
        throw err
      }
    },

    // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
    async fetchStreams() {
      try {
        const res = await axios.get('/api/streams')
        this.streams = Object.fromEntries(
          res.data.map((stream: Stream) => [stream.id, stream.name])
        )
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ç–æ–∫–æ–≤:', err)
      }
    },

    // ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    async createStudent(student: Omit<StudentFull,
      'id' | 'discountedPrice' | 'paymentSchedule' | 'financing' | 'totalCoursePrice' | 'discountPercent'>) {
      try {
        const res = await axios.post('/api/students', student)
        await this.fetchStudents()
        return res.data
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err)
        throw err
      }
    },

    // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    async updateStudent(id: number, updatedData: Partial<Student>) {
      try {
        await axios.put(`/api/students/${id}`, updatedData)
        const index = this.list.findIndex((s) => s.id === id)
        if (index !== -1) {
          this.list[index] = {
            ...this.list[index],
            ...updatedData,
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err)
        throw err
      }
    },

    // ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    async deleteStudent(id: number) {
      try {
        await axios.post(`/api/students/delete/${id}`)
        this.list = this.list.filter((s) => s.id !== id)
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err)
        throw err
      }
    },

    // üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    exportToExcel() {
      if (this.list.length === 0) return

      const s = this.list[0] // –ø–µ—Ä–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç

      const rows = [{
        ID: s.id,
        –§–ò–û: s.full_name,
        –ò–ò–ù: s.iin,
        Email: s.email,
        –¢–µ–ª–µ—Ñ–æ–Ω: s.phone,
        –°—Ç–∞—Ç—É—Å: s.status,
        –¢–æ–ø: s.top_student ? '–î–∞' : '–ù–µ—Ç',
        –ö—É—Ä—Å: s.subject,
        –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: s.funding_source,
        –û–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å: s.total_cost,
        –°–∫–∏–¥–∫–∞: s.discount_percent,
        –û–ø–ª–∞—á–µ–Ω–æ: s.paid_amount,
        –û—Å—Ç–∞–ª–æ—Å—å: s.total_cost - s.paid_amount,
        –ü–µ—Ä–∏–æ–¥_–æ–ø–ª–∞—Ç—ã: s.payment_period,
      }]

      const sheet = XLSX.utils.json_to_sheet(rows)
      const wb = XLSX.utils.book_new()
      XLSX.utils.book_append_sheet(wb, sheet, '–°—Ç—É–¥–µ–Ω—Ç—ã')
      XLSX.writeFile(wb, `student_${s.full_name}.xlsx`)
    }

  },
})

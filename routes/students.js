const express = require('express');
const router = express.Router();
const pool = require('../config/db');



router.get('/students/courses', async (req, res) => {
  try {
    const result = await pool.query('SELECT id, name FROM courses ORDER BY id');
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});




router.get('/students', async (req, res) => {
  const { search } = req.query;

  try {
    let result;

    const baseQuery = `
  SELECT 
    students.id,
    students.full_name,
    students.iin,
    students.email,
    students.phone,
    students.status,
    students.top_student,
    students.funding_source,
    students.subject,
    students.total_cost,
    students.discount_percent,
    students.paid_amount,
    students.payment_period,
    students.stream_id,
    students.created_at,
    streams.name AS stream,

    -- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –±—ã–ª–∞)
    (
      SELECT date
      FROM payment_schedule
      WHERE student_id = students.id AND paid = true
      ORDER BY date DESC
      LIMIT 1
    ) AS last_payment_date

  FROM students
  LEFT JOIN streams ON students.stream_id = streams.id
`;


    if (search) {
      result = await pool.query(
        `${baseQuery} WHERE LOWER(full_name) LIKE LOWER($1) ORDER BY students.id`,
        [`%${search}%`]
      );
    } else {
      result = await pool.query(`${baseQuery} ORDER BY students.id`);
    }

    res.json(result.rows);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


router.get('/streams', async (req, res) => {
  try {
    const result = await pool.query('SELECT id, name FROM streams ORDER BY id');
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.post('/students', async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ:', req.body);
  const student = req.body;
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º:', student);
  const {
    full_name, iin, email, phone, status, top_student,
    funding_source, subject, total_cost, paid_amount,
    payment_period, paymentPeriod // <- –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å —Ñ—Ä–æ–Ω—Ç–∞ camelCase
  } = req.body;

  if (!funding_source) {
    return res.status(400).json({ error: '–ü–æ–ª–µ "funding_source" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  let fundingSourceText;

  switch (funding_source) {
    case 'TechOrda':
    case 'techorda':
      fundingSourceText = 'TechOrda';
      break;
    case '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥—Ä–∞–Ω—Ç':
    case 'internal_grant':
      fundingSourceText = '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥—Ä–∞–Ω—Ç';
      break;
    case '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞':
    case 'full':
      fundingSourceText = '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞';
      break;
    case '–°–∫–∏–¥–∫–∞ 30%':
    case 'discount_30':
      fundingSourceText = '–°–∫–∏–¥–∫–∞ 30%';
      break;
    case '–°–∫–∏–¥–∫–∞ 70%':
    case 'discount_70':
      fundingSourceText = '–°–∫–∏–¥–∫–∞ 70%';
      break;
    default:
      return res.status(400).json({ error: `–ù–µ–≤–µ—Ä–Ω—ã–π funding_source: "${funding_source}".` });
  }

  try {
    const parsedPeriod = parseInt(payment_period ?? paymentPeriod, 10);
    const finalPaymentPeriod = Number.isFinite(parsedPeriod) ? parsedPeriod : 0;

    const result = await pool.query(
      `INSERT INTO students (
        full_name, iin, email, phone, status, top_student,
        funding_source, subject, total_cost, paid_amount, payment_period
      ) VALUES (
        $1, $2, $3, $4, $5, $6,
        $7, $8, $9, $10, $11
      ) RETURNING *`,
      [
        full_name,
        iin,
        email,
        phone,
        status,
        top_student === 'on',
        fundingSourceText,
        subject,
        total_cost || 0,
        paid_amount || 0,
        finalPaymentPeriod
      ]
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ discount_percent
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.' });
  }
});



router.post('/students/delete/:id', async (req, res) => {
  const studentId = req.params.id;

  try {
    await pool.query('DELETE FROM students WHERE id = $1', [studentId]);
    res.status(200).json({ message: '–£–¥–∞–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
});

router.get('/students/:id', async (req, res) => {
  const id = req.params.id;

  try {
    const studentRes = await pool.query(`
      SELECT s.id, s.full_name, s.iin, s.email, s.phone, s.status, s.top_student,
           s.funding_source, s.subject, s.total_cost, s.discount_percent,
           s.payment_period, s.stream_id,
           COALESCE(SUM(ps.amount) FILTER (WHERE ps.paid = true), 0) AS paid_amount,
           s.total_cost - COALESCE(SUM(ps.amount) FILTER (WHERE ps.paid = true), 0) AS amount_remaining
      FROM students s
      LEFT JOIN payment_schedule ps ON s.id = ps.student_id
      WHERE s.id = $1
      GROUP BY s.id
    `, [id]);


    const student = studentRes.rows[0];
    if (!student) return res.status(404).json({ error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ payment_period –≤ —Å—Ç—Ä–æ–∫—É
    student.payment_period = String(student.payment_period);

    res.status(200).json({ ...student, paymentSchedule: [] });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});






router.put('/students/:id', async (req, res) => {
  const id = req.params.id;
  const {
    full_name, iin, email, phone, status, top_student,
    funding_source, subject, total_cost,
    paid_amount, payment_period
  } = req.body;

  try {
    await pool.query(
      `UPDATE students SET
    full_name = $1,
    iin = $2,
    email = $3,
    phone = $4,
    status = $5,
    top_student = $6,
    funding_source = $7,
    subject = $8,
    total_cost = $9,
    paid_amount = $10,
    payment_period = $11
  WHERE id = $12`,
      [
        full_name, iin, email, phone, status, top_student,
        funding_source, subject, total_cost,
        paid_amount, payment_period, id
      ]
    );



    res.status(200).json({ message: '–°—Ç—É–¥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (PUT):', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
  }
});

router.post('/students/edit/:id', async (req, res) => {
  const id = req.params.id;
  const {
    full_name, iin, email, phone, status, top_student,
    funding_source, subject, total_cost, discount_percent, paid_amount
  } = req.body;

  try {
    await pool.query(
      `UPDATE students SET
    full_name = $1,
    iin = $2,
    email = $3,
    phone = $4,
    status = $5,
    top_student = $6,
    funding_source = $7,
    subject = $8,
    total_cost = $9,
    discount_percent = $10,
    paid_amount = $11
  WHERE id = $12`,
      [
        full_name, iin, email, phone, status, top_student,
        funding_source, subject, total_cost, discount_percent, paid_amount, id
      ]
    );


    res.status(200).json({ message: '–°—Ç—É–¥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
  }
});

// PUT /students/:id/schedule ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
router.put('/students/:id/schedule', async (req, res) => {
  const { id } = req.params;
  const { payment_schedule } = req.body;

  try {
    await pool.query(
      'UPDATE students SET payment_schedule = $1 WHERE id = $2',
      [payment_schedule, id]
    );
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ payment_schedule:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// PUT /students/:id/payment-schedule
// ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: PUT /students/:id/payment-schedule
// backend/routes/students.js
router.put('/students/:id/payment-schedule', async (req, res) => {
  const studentId = req.params.id;
  const paymentSchedule = req.body.paymentSchedule;

  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    await pool.query('DELETE FROM payment_schedule WHERE student_id = $1', [studentId]);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    for (const payment of paymentSchedule) {
      await pool.query(
        `INSERT INTO payment_schedule (student_id, date, paid, amount)
         VALUES ($1, $2, $3, $4)`,
        [studentId, payment.date, payment.paid, payment.amount]
      );
    }

    // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º paid_amount –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const sumResult = await pool.query(`
      SELECT COALESCE(SUM(amount), 0) AS total_paid
      FROM payment_schedule
      WHERE student_id = $1 AND paid = true
    `, [studentId]);

    const paidAmount = sumResult.rows[0].total_paid;

    await pool.query(`
      UPDATE students
      SET paid_amount = $1
      WHERE id = $2
    `, [paidAmount, studentId]);

    res.status(200).json({ success: true, paymentSchedule });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞' });
  }
});

router.get('/students/:id/payment-schedule', async (req, res) => {
  const studentId = req.params.id;

  try {
    const result = await pool.query(
      'SELECT date, paid, amount FROM payment_schedule WHERE student_id = $1 ORDER BY date',
      [studentId]
    );

    res.json({ success: true, paymentSchedule: result.rows });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞' });
  }
});


// POST /students/:id/generate-payment-schedule
router.post('/students/:id/generate-payment-schedule', async (req, res) => {
  const studentId = req.params.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    const studentRes = await pool.query(`
      SELECT 
        total_cost,
        discount_percent,
        payment_period,
        COALESCE((
          SELECT SUM(amount)
          FROM payment_schedule
          WHERE student_id = $1 AND paid = true
        ), 0) AS paid_amount
      FROM students
      WHERE id = $1
    `, [studentId]);

    if (studentRes.rowCount === 0) {
      return res.status(404).json({ error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const { total_cost, discount_percent, payment_period, paid_amount } = studentRes.rows[0];

    const discount = (total_cost * (discount_percent || 0)) / 100;
    const amountRemaining = total_cost - discount - paid_amount;

    if (payment_period <= 0) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã (payment_period)' });
    }

    const monthlyAmount = Math.round(amountRemaining / payment_period);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫
    await pool.query('DELETE FROM payment_schedule WHERE student_id = $1', [studentId]);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    const now = new Date();
    const schedule = [];

    for (let i = 0; i < payment_period; i++) {
      const date = new Date(now);
      date.setMonth(now.getMonth() + i);

      schedule.push({
        student_id: studentId,
        date: date.toISOString().split('T')[0],
        paid: false,
        amount: monthlyAmount
      });

      await pool.query(
        `INSERT INTO payment_schedule (student_id, date, paid, amount)
         VALUES ($1, $2, $3, $4)`,
        [studentId, date.toISOString().split('T')[0], false, monthlyAmount]
      );
    }

    // –û–±–Ω–æ–≤–∏–º paid_amount –≤ students –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    await pool.query(`
      UPDATE students SET paid_amount = $1
      WHERE id = $2
    `, [paid_amount, studentId]);

    res.status(200).json({ success: true, paymentSchedule: schedule });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞' });
  }
});





// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
router.get('/students/:id/payments', async (req, res) => {
  const studentId = req.params.id;
  try {
    const result = await pool.query(
      'SELECT * FROM student_payments WHERE student_id = $1 ORDER BY date ASC',
      [studentId]
    );
    res.status(200).json(result.rows);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂
router.post('/students/:id/payments', async (req, res) => {
  const studentId = req.params.id;
  const { date, amount, comment, paid } = req.body;

  try {
    await pool.query(
      `INSERT INTO student_payments (student_id, date, amount, comment, paid)
       VALUES ($1, $2, $3, $4, $5)`,
      [studentId, date, amount, comment || '', paid || false]
    );
    res.status(201).json({ message: '–ü–ª–∞—Ç—ë–∂ –¥–æ–±–∞–≤–ª–µ–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏' });
  }
});


module.exports = router;
